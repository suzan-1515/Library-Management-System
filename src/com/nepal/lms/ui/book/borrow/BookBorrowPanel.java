/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nepal.lms.ui.book.borrow;

import com.nepal.lms.action.BorrowListener;
import com.nepal.lms.bll.BorrowBLL;
import com.nepal.lms.custom.Alert;
import com.nepal.lms.entity.borrow.Borrow;
import com.nepal.lms.entity.user.UserInfo;
import com.nepal.lms.exception.CorruptedDataException;
import com.nepal.lms.exception.MissingFileException;
import com.nepal.lms.exception.RecordNotFoundException;
import com.nepal.lms.ui.BaseUserPanel;
import com.nepal.lms.util.Logy;
import com.nepal.lms.util.Utils;
import com.nepal.lms.view.BookView;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @borrow Suzn
 */
public final class BookBorrowPanel extends BaseUserPanel implements BookView<Borrow>, BorrowListener {

    private List<Borrow> borrowList;
    private final UserInfo userInfo;

    private BorrowListener borrowListener;

    /**
     * Creates new form BookBorrowPanel
     *
     * @param userInfo
     */
    public BookBorrowPanel(UserInfo userInfo) {
        initComponents();
        this.userInfo = userInfo;
        setupUserView(userInfo);
        borrowList = new ArrayList<>();
        this.loadTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        centerPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        centerSubPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        bottomPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        addBookborrowButton = new javax.swing.JButton();
        updateBookborrowButton = new javax.swing.JButton();
        deleteBookBorrowButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        centerPanel.setLayout(new java.awt.CardLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        searchPanel.setBackground(new java.awt.Color(249, 249, 249));
        searchPanel.setPreferredSize(new java.awt.Dimension(367, 70));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout();
        flowLayout1.setAlignOnBaseline(true);
        searchPanel.setLayout(flowLayout1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(280, 65));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search_blue.png"))); // NOI18N

        searchTextField.setBackground(new java.awt.Color(249, 249, 249));
        searchTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchTextField.setToolTipText("Search for title, publisher, author..");
        searchTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(39, 26, 252)));
        searchTextField.setMinimumSize(new java.awt.Dimension(200, 15));
        searchTextField.setOpaque(false);
        searchTextField.setPreferredSize(new java.awt.Dimension(200, 15));
        searchTextField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                String text = searchTextField.getText();
                System.out.println(text);
                if (text.trim().length() == 0) {
                    ((javax.swing.table.TableRowSorter<javax.swing.table.TableModel>)table.getRowSorter()).setRowFilter(null);
                } else {
                    ((javax.swing.table.TableRowSorter<javax.swing.table.TableModel>)table.getRowSorter()).setRowFilter(javax.swing.RowFilter.regexFilter("^(?i)" + text));
                }
                table.repaint();
            }
            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                String text = searchTextField.getText();
                if (text.trim().length() == 0) {
                    ((javax.swing.table.TableRowSorter<javax.swing.table.TableModel>)table.getRowSorter()).setRowFilter(null);
                } else {
                    ((javax.swing.table.TableRowSorter<javax.swing.table.TableModel>)table.getRowSorter()).setRowFilter(javax.swing.RowFilter.regexFilter("^(?i)" + text));
                }
            }
            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                //not needed: throw new UnsupportedOperationException("Not supported yet.");
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel3)
                .addGap(5, 5, 5)
                .addComponent(searchTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        searchPanel.add(jPanel2);

        jPanel4.add(searchPanel, java.awt.BorderLayout.PAGE_START);

        centerSubPanel.setLayout(new java.awt.CardLayout());

        javax.swing.table.DefaultTableModel tableModel = new javax.swing.table.DefaultTableModel(){
            @Override
            public boolean isCellEditable(int i, int i1) {
                return false;
            }
        };

        tableModel.addColumn(com.nepal.lms.entity.borrow.BorrowParams.ID.toUpperCase());
        tableModel.addColumn(com.nepal.lms.entity.borrow.BorrowParams.BOOK.toUpperCase());
        tableModel.addColumn(com.nepal.lms.entity.borrow.BorrowParams.MEMBER.toUpperCase());
        tableModel.addColumn(com.nepal.lms.entity.borrow.BorrowParams.USER.toUpperCase());
        tableModel.addColumn(com.nepal.lms.entity.borrow.BorrowParams.DAYS.toUpperCase());
        tableModel.addColumn(com.nepal.lms.entity.borrow.BorrowParams.RETURNING_DATE.toUpperCase());
        table.setModel(tableModel);
        table.setRowHeight(26);
        table.setShowHorizontalLines(false);
        jScrollPane1.setViewportView(table);
        javax.swing.table.TableRowSorter<javax.swing.table.TableModel> rowSorter = new javax.swing.table.TableRowSorter<>(table.getModel());
        table.setRowSorter(rowSorter);

        centerSubPanel.add(jScrollPane1, "card2");

        jPanel4.add(centerSubPanel, java.awt.BorderLayout.CENTER);

        bottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING));

        jPanel3.setOpaque(false);

        addBookborrowButton.setText("Add New");
        addBookborrowButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addBookborrowButton.setPreferredSize(new java.awt.Dimension(80, 40));
        addBookborrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookborrowButtonActionPerformed(evt);
            }
        });
        jPanel3.add(addBookborrowButton);

        updateBookborrowButton.setText("Update");
        updateBookborrowButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updateBookborrowButton.setPreferredSize(new java.awt.Dimension(80, 40));
        updateBookborrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBookborrowButtonActionPerformed(evt);
            }
        });
        updateBookborrowButton.setVisible(false);
        jPanel3.add(updateBookborrowButton);

        deleteBookBorrowButton.setText("Delete");
        deleteBookBorrowButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteBookBorrowButton.setPreferredSize(new java.awt.Dimension(80, 40));
        deleteBookBorrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBookBorrowButtonActionPerformed(evt);
            }
        });
        jPanel3.add(deleteBookBorrowButton);

        bottomPanel.add(jPanel3);

        jPanel4.add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        centerPanel.add(jPanel4, "card2");

        add(centerPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void addBookborrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookborrowButtonActionPerformed
        BookBorrowInsertDialog bookBorrowInsertDialog = new BookBorrowInsertDialog((JFrame) SwingUtilities.getWindowAncestor(this), true, userInfo);
        bookBorrowInsertDialog.setItemAddedListener((Borrow borrow) -> {
            appendBorrowData(borrow);
        });
        bookBorrowInsertDialog.setVisible(true);
    }//GEN-LAST:event_addBookborrowButtonActionPerformed

    private void updateBookborrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBookborrowButtonActionPerformed
        int row = table.getSelectedRow();
        if (row > -1) {
            Borrow s = getBeanFromRow(row);
            if (s != null) {
                BookBorrowUpdateDialog bookBorrowUpdateDialog = new BookBorrowUpdateDialog((JFrame) SwingUtilities.getWindowAncestor(this),
                        true, s);
                bookBorrowUpdateDialog.setItemUpdatedListener((Borrow borrow) -> {
                    updateBorrowData(borrow, row);
                });
                bookBorrowUpdateDialog.setVisible(true);
            }
        }
    }//GEN-LAST:event_updateBookborrowButtonActionPerformed

    private void deleteBookBorrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBookBorrowButtonActionPerformed
        if (Utils.isTableRowSelected(table)) {
            if (Alert.showDeleteConfirmDialog(this) == JOptionPane.YES_OPTION) {
                int row = table.getSelectedRow();
                int id = Utils.getIdFromTable(table, row);
                try {
                    Borrow borrow = new Borrow();
                    borrow.setId(id);
                    BorrowBLL.deleteBorrow(borrow);
                    removeBorrowData(borrow, row);
                } catch (RecordNotFoundException | MissingFileException | CorruptedDataException ex) {
                    Logy.e(ex);
                    Alert.showError(this, ex.getMessage());
                }
            }

        }
    }//GEN-LAST:event_deleteBookBorrowButtonActionPerformed

    @Override
    public final void loadTableData() {

        if (borrowList == null || borrowList.isEmpty()) {
            Logy.d("Loading borrow from file for first Time");
            try {
                borrowList = BorrowBLL.getAllBorrow();
            } catch (RecordNotFoundException | MissingFileException | CorruptedDataException ex) {
                Logy.e(ex);
                Alert.showError(this, ex.getMessage());
                return;
            }

        } else {
            Logy.d("borrow already loaded");
        }

        this.fillTableData(borrowList);

    }

    /**
     *
     * @param borrowInfoList
     */
    @Override
    public final void fillTableData(List<Borrow> borrowInfoList) {

        borrowInfoList.stream().forEach((borrowInfo) -> {
            addBorrowRowData(borrowInfo);
        });

    }

    public void addBorrowRowData(Borrow borrow) {
        ((DefaultTableModel) table.getModel()).insertRow(0, new Object[]{
            borrow.getId(),
            borrow.getBook().getTitle(),
            borrow.getMember().getName(),
            borrow.getUser().getName(),
            borrow.getNumOfDays(),
            Utils.millisToSql(borrow.getReturningDate())
        });
    }

    private void updateBorrowData(Borrow s, int row) {
        for (Borrow borrow : borrowList) {
            if (borrow.getId() == borrow.getId()) {
                borrow.setBook(borrow.getBook());
                borrow.setMember(borrow.getMember());
                borrow.setNumOfDays(borrow.getNumOfDays());
                borrow.setReturningDate(borrow.getReturningDate());
                break;
            }
        }

        updateBorrowRowData(s, row);
//        if (borrowListener != null) {
//            borrowListener.onBorrowDataChanged(s);
//        }

    }

    private void updateBorrowRowData(Borrow borrow, int row) {
        ((DefaultTableModel) table.getModel()).setValueAt(borrow.getBook().getTitle(), row, 1);
        ((DefaultTableModel) table.getModel()).setValueAt(borrow.getMember().getName(), row, 2);
        ((DefaultTableModel) table.getModel()).setValueAt(borrow.getNumOfDays(), row, 4);
        ((DefaultTableModel) table.getModel()).setValueAt(Utils.millisToSql(borrow.getReturningDate()), row, 5);
    }

    private Borrow getBeanFromRow(int row) {
        int id = (int) table.getModel().getValueAt(row, 0);
        return borrowList.stream()
                .filter((borrow) -> borrow.getId() == id)
                .findFirst()
                .orElse(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBookborrowButton;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JPanel centerSubPanel;
    private javax.swing.JButton deleteBookBorrowButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JTable table;
    private javax.swing.JButton updateBookborrowButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onBorrowDataChanged(Borrow a) {
        appendBorrowData(a);
    }

    private void appendBorrowData(Borrow borrow) {
        borrowList.add(borrow);
        addBorrowRowData(borrow);
        if (borrowListener != null) {
            borrowListener.onBorrowDataChanged(borrow);
        }
    }

    @Override
    protected void setupAdminView() {
    }

    @Override
    protected void setupLibrarianView() {
        this.deleteBookBorrowButton.setVisible(false);
    }

    /**
     * @return the borrowListener
     */
    public BorrowListener getBorrowListener() {
        return borrowListener;
    }

    /**
     * @param borrowListener the borrowListener to set
     */
    public void setBorrowListener(BorrowListener borrowListener) {
        this.borrowListener = borrowListener;
    }

    @Override
    public void onBorrowDataRemoved(Borrow b) {
        for (Borrow auth : borrowList) {
            if (auth.getId() == b.getId()) {
                borrowList.remove(auth);
                break;
            }
        }

    }

    private void removeBorrowData(Borrow a, int row) {
        onBorrowDataRemoved(a);
        ((DefaultTableModel) table.getModel()).removeRow(row);
    }
}
