/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sujan.lms.ui.book.publisher;

import com.sujan.lms.action.PublisherListener;
import com.sujan.lms.bll.PublisherBLL;
import com.sujan.lms.custom.Alert;
import com.sujan.lms.entity.publisher.Publisher;
import com.sujan.lms.entity.user.UserInfo;
import com.sujan.lms.exception.CorruptedDataException;
import com.sujan.lms.exception.MissingFileException;
import com.sujan.lms.exception.RecordNotFoundException;
import com.sujan.lms.ui.BaseUserPanel;
import com.sujan.lms.util.Logy;
import com.sujan.lms.util.Utils;
import com.sujan.lms.view.BookView;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @publisher Suzn
 */
public final class BookPublisherPanel extends BaseUserPanel implements BookView<Publisher>, PublisherListener {

    private List<Publisher> publisherList;

    /**
     * Creates new form BookPublisherPanel
     *
     * @param userInfo
     */
    public BookPublisherPanel(UserInfo userInfo) {
        initComponents();
        setupUserView(userInfo);
        publisherList = new ArrayList<>();
        this.loadTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        centerPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        centerSubPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        bottomPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        addPublisherButton = new javax.swing.JButton();
        updatePublisherButton = new javax.swing.JButton();
        deletePublisherButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        centerPanel.setLayout(new java.awt.CardLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        searchPanel.setBackground(new java.awt.Color(249, 249, 249));
        searchPanel.setPreferredSize(new java.awt.Dimension(367, 70));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout();
        flowLayout1.setAlignOnBaseline(true);
        searchPanel.setLayout(flowLayout1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(280, 65));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search_blue.png"))); // NOI18N

        searchTextField.setBackground(new java.awt.Color(249, 249, 249));
        searchTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchTextField.setToolTipText("Search for title, publisher, author..");
        searchTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(39, 26, 252)));
        searchTextField.setMinimumSize(new java.awt.Dimension(200, 15));
        searchTextField.setOpaque(false);
        searchTextField.setPreferredSize(new java.awt.Dimension(200, 15));
        searchTextField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                String text = searchTextField.getText();
                System.out.println(text);
                if (text.trim().length() == 0) {
                    ((javax.swing.table.TableRowSorter<javax.swing.table.TableModel>)table.getRowSorter()).setRowFilter(null);
                } else {
                    ((javax.swing.table.TableRowSorter<javax.swing.table.TableModel>)table.getRowSorter()).setRowFilter(javax.swing.RowFilter.regexFilter("^(?i)" + text));
                }
                table.repaint();
            }
            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                String text = searchTextField.getText();
                if (text.trim().length() == 0) {
                    ((javax.swing.table.TableRowSorter<javax.swing.table.TableModel>)table.getRowSorter()).setRowFilter(null);
                } else {
                    ((javax.swing.table.TableRowSorter<javax.swing.table.TableModel>)table.getRowSorter()).setRowFilter(javax.swing.RowFilter.regexFilter("^(?i)" + text));
                }
            }
            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                //not needed: throw new UnsupportedOperationException("Not supported yet.");
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel3)
                .addGap(5, 5, 5)
                .addComponent(searchTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        searchPanel.add(jPanel2);

        jPanel4.add(searchPanel, java.awt.BorderLayout.PAGE_START);

        centerSubPanel.setLayout(new java.awt.CardLayout());

        javax.swing.table.DefaultTableModel tableModel = new javax.swing.table.DefaultTableModel(){
            @Override
            public boolean isCellEditable(int i, int i1) {
                return false;
            }
        };

        tableModel.addColumn(com.sujan.lms.entity.publisher.PublisherParams.ID.toUpperCase());
        tableModel.addColumn(com.sujan.lms.entity.publisher.PublisherParams.TITLE.toUpperCase());
        tableModel.addColumn(com.sujan.lms.entity.publisher.PublisherParams.CONTACT.toUpperCase());
        table.setModel(tableModel);
        table.setRowHeight(26);
        table.setShowHorizontalLines(false);
        jScrollPane1.setViewportView(table);
        javax.swing.table.TableRowSorter<javax.swing.table.TableModel> rowSorter = new javax.swing.table.TableRowSorter<>(table.getModel());
        table.setRowSorter(rowSorter);

        centerSubPanel.add(jScrollPane1, "card2");

        jPanel4.add(centerSubPanel, java.awt.BorderLayout.CENTER);

        bottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING));

        jPanel3.setOpaque(false);

        addPublisherButton.setText("Add New");
        addPublisherButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addPublisherButton.setPreferredSize(new java.awt.Dimension(80, 40));
        addPublisherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPublisherButtonActionPerformed(evt);
            }
        });
        jPanel3.add(addPublisherButton);

        updatePublisherButton.setText("Update");
        updatePublisherButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updatePublisherButton.setPreferredSize(new java.awt.Dimension(80, 40));
        updatePublisherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePublisherButtonActionPerformed(evt);
            }
        });
        jPanel3.add(updatePublisherButton);

        deletePublisherButton.setText("Delete");
        deletePublisherButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deletePublisherButton.setPreferredSize(new java.awt.Dimension(80, 40));
        deletePublisherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePublisherButtonActionPerformed(evt);
            }
        });
        jPanel3.add(deletePublisherButton);

        bottomPanel.add(jPanel3);

        jPanel4.add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        centerPanel.add(jPanel4, "card2");

        add(centerPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void addPublisherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPublisherButtonActionPerformed
        BookPublisherInsertDialog bookPublisherInsertDialog = new BookPublisherInsertDialog((JFrame) SwingUtilities.getWindowAncestor(this), true);
        bookPublisherInsertDialog.setItemAddedListener((Publisher publisher) -> {
            appendPublisherData(publisher);
        });
        bookPublisherInsertDialog.setVisible(true);
    }//GEN-LAST:event_addPublisherButtonActionPerformed

    private void updatePublisherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePublisherButtonActionPerformed
        int row = table.getSelectedRow();
        if (row > -1) {
            Publisher p = getBeanFromRow(table.getRowSorter().convertRowIndexToModel(row));
            if (p != null) {
                BookPublisherUpdateDialog bookPublisherUpdateDialog = new BookPublisherUpdateDialog((JFrame) SwingUtilities.getWindowAncestor(this),
                        true, p);
                bookPublisherUpdateDialog.setItemUpdatedListener((Publisher publisher) -> {
                    updatePublisherData(publisher, row);
                });
                bookPublisherUpdateDialog.setVisible(true);
            }
        }
    }//GEN-LAST:event_updatePublisherButtonActionPerformed

    private void deletePublisherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePublisherButtonActionPerformed
        if (Utils.isTableRowSelected(table)) {
            if (Alert.showDeleteConfirmDialog(this) == JOptionPane.YES_OPTION) {
                int row = table.getSelectedRow();
                int id = Utils.getIdFromTable(table, table.getRowSorter().convertRowIndexToModel(row));
                try {
                    Publisher publisher = new Publisher();
                    publisher.setId(id);
                    PublisherBLL.deletePublisher(publisher);
                    removePublisherData(publisher, row);
                } catch (RecordNotFoundException | MissingFileException | CorruptedDataException ex) {
                    Logy.e(ex);
                    Alert.showError(this, ex.getMessage());
                }
            }

        }
    }//GEN-LAST:event_deletePublisherButtonActionPerformed

    @Override
    public final void loadTableData() {

        if (publisherList == null || publisherList.isEmpty()) {
            Logy.d("Loading publisher from file for first Time");
            try {
                publisherList = PublisherBLL.getAllPublisher();
            } catch (RecordNotFoundException | MissingFileException | CorruptedDataException ex) {
                Logy.e(ex);
                Alert.showError(this, ex.getMessage());
                return;
            }

        } else {
            Logy.d("publisher already loaded");
        }

        this.fillTableData(publisherList);
    }

    public void addPublisherRowData(Publisher publisher) {
        ((DefaultTableModel) table.getModel()).insertRow(0, new Object[]{
            publisher.getId(),
            publisher.getTitle(),
            publisher.getContact()
        });
    }

    /**
     *
     * @param publisherInfoList
     */
    @Override
    public final void fillTableData(List<Publisher> publisherInfoList) {

        publisherInfoList.stream().forEach((publisherInfo) -> {
            addPublisherRowData(publisherInfo);
        });

    }

    private void updatePublisherData(Publisher s, int row) {
        for (Publisher publisher : publisherList) {
            if (publisher.getId() == publisher.getId()) {
                publisher.setTitle(publisher.getTitle());
                publisher.setContact(publisher.getContact());
                break;
            }
        }

        updatePublisherRowData(s, row);
    }

    private void updatePublisherRowData(Publisher publisher, int row) {
        ((DefaultTableModel) table.getModel()).setValueAt(publisher.getTitle(), row, 1);
        ((DefaultTableModel) table.getModel()).setValueAt(publisher.getContact(), row, 2);
    }

    private Publisher getBeanFromRow(int row) {
        int id = (int) table.getModel().getValueAt(row, 0);
        return publisherList.stream()
                .filter((publisher) -> publisher.getId() == id)
                .findFirst()
                .orElse(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPublisherButton;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JPanel centerSubPanel;
    private javax.swing.JButton deletePublisherButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JTable table;
    private javax.swing.JButton updatePublisherButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onPublisherDataChanged(Publisher p) {
        appendPublisherData(p);
    }

    private void appendPublisherData(Publisher publisher) {
        publisherList.add(publisher);
        addPublisherRowData(publisher);
    }

    @Override
    protected void setupAdminView() {
    }

    @Override
    protected void setupLibrarianView() {
        this.deletePublisherButton.setVisible(false);
    }

    @Override
    public void onPublisherDataRemoved(Publisher p) {
        for (Publisher auth : publisherList) {
            if (auth.getId() == p.getId()) {
                publisherList.remove(auth);
                break;
            }
        }

    }

    private void removePublisherData(Publisher a, int row) {
        onPublisherDataRemoved(a);
        ((DefaultTableModel) table.getModel()).removeRow(row);
    }

}
